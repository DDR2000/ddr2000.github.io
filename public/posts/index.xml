<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Dilir Diyan Rafid</title>
    <link>http://localhost:1313/Website/posts/</link>
    <description>Recent content in Posts on Dilir Diyan Rafid</description>
    <generator>Hugo -- 0.126.1</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Jan 2024 07:07:07 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/Website/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An introduction in the context of an early project</title>
      <link>http://localhost:1313/Website/posts/introduction/</link>
      <pubDate>Sun, 14 Jan 2024 07:07:07 +0100</pubDate>
      <guid>http://localhost:1313/Website/posts/introduction/</guid>
      <description>&lt;p&gt;With the prospect of slowly populating this website with my past and ongoing projects, I figured I&amp;rsquo;d do a sort of introduction post while I take you through one of my earlier projects, Etel. The idea came to me when I first stumbled upon GPGPU programming during my freshman year, don&amp;rsquo;t ask how that happened before I even touched a Graphics API. I was particularly proud of this idea because I came up with it myself, regardless of whether it already existed somewhere out there.&lt;/p&gt;
&lt;p&gt;The project in question is a random terrain generator. In hindsight, there was nothing so &amp;ldquo;terrain&amp;rdquo; about it. The idea was to start with a 2D array representing the top view of a patch of terrain. In the beginning all elements are assigned the same value, which represents the height at that point on the x-z plain. A mask array of the same dimensions is then subdivided into a 2x2 grid of cells, where each cell is assigned a new height value in a specified range. Each cell of the mask overlaps a quadrant of the original grid and the new values of the mask are applied to coinciding points from the original grid:&lt;/p&gt;
&lt;figure class=&#34;align-center &#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;../gridmask.png#center&#34;
         alt=&#34;Paint Supremacy&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Paint Supremacy&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The new grid now has 4 different regions of slightly varied altitude. This process is repeated by subdividing the mask into progressively smaller cells, resulting in more frequent regions, with peaks and troughs.&lt;/p&gt;
&lt;p&gt;The motivation behind the project was taking CUDA for a test drive. Still not confident in my C++ at the time, I picked up PyCUDA to parallelize the mask application over the large 2D array in Python. The rather simple CUDA kernel in Inline C looked like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kernel_code = &amp;#34;&amp;#34;&amp;#34;
__global__ void compute_heights(float *a, float *b, float *c) {
    int i = threadIdx.x + blockIdx.x * blockDim.x;
    int j = threadIdx.y + blockIdx.y * blockDim.y;
    c[i,j] = (a[i,j] + b[i,j])/2;
}
&amp;#34;&amp;#34;&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It would be much later when I took ML classes that I would realize how useful this can be for training models. Recall how I mentioned earlier how this was less &amp;ldquo;terrain&amp;rdquo; and more a random array. Without any visualization, this might as well be a PyCUDA tutorial for nested for loops. Creating this website finally presented an excuse to resurrect this script and feed the terrain array into a WebGL renderer.&lt;/p&gt;
&lt;script src=&#34;https://greggman.github.io/webgl-lint/webgl-lint.js&#34; crossorigin&gt;&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;../Common/initShaders2.js&#34;&gt;&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;../Common/MVnew.js&#34;&gt;&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;../data.json&#34;&gt;&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;../camera.js&#34;&gt;&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;../Drawable.js&#34;&gt;&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;../square.js&#34;&gt;&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;../app.js&#34;&gt;&lt;/script&gt;
&lt;script&gt;
console.log(window.location.pathname);
&lt;/script&gt;
&lt;div align=&#34;center&#34;&gt;
&lt;canvas id=&#34;gl-canvas&#34; width=&#34;700&#34; height=&#34;500&#34;&gt;
&lt;/canvas&gt;
&lt;/div&gt;
&lt;p&gt;Good stuff. Going back to this made me realize I could go ham with this. Introduce control points to influence peaks or valleys. Let camera control simulate traversing the terrain with the mesh as a bound, could probably do that right now. But alas, there&amp;rsquo;s more fun to be had. Elsewhere.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
